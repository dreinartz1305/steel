{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "#10 - CAPEX switching",
  "steps": [
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "# Capex switching values\n\nThis module contains the functions used for establishing the CAPEX switching values.",
      "line": 1
    },
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "## Capex timeseries\n\nThis is the main function to create a capex dataframe with all the potential switches. It takes a `serialize_only` argument that when set to `True` saves the dataframe as a pickle.",
      "line": 343,
      "selection": {
        "start": {
          "line": 335,
          "character": 1
        },
        "end": {
          "line": 343,
          "character": 8
        }
      }
    },
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "### Switch dictionary\n\nThe first step is to create the switching dataframes using the `TECH_REFERENCE_LIST` and proccesing it with the following function:\n```python\ndef create_switching_dfs(technology_list: list) -> dict:\n    \"\"\"Creates a dictionary that hold a DataFrame with three columns fo each tehnology passed to it in a list.\n\n    Args:\n        technology_list (list): A list of technologies that will be the dictionary keys.\n\n    Returns:\n        dict: A dictionary with each key as the technologies.\n    \"\"\"\n    logger.info(\"Creating the base switching dict\")\n    df_dict = {}\n    for technology in technology_list:\n        df_temp = pd.DataFrame(\n            data={\n                \"Start Technology\": technology,\n                \"New Technology\": technology_list,\n                \"value\": \"\",\n            }\n        )\n        df_dict[technology] = df_temp\n    return df_dict\n```",
      "line": 345,
      "selection": {
        "start": {
          "line": 345,
          "character": 5
        },
        "end": {
          "line": 345,
          "character": 63
        }
      }
    },
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "### Data for get capex values\n\nLoad the `capex_dict` from the pickle folder, and get the maximum year from the SWITCH_CAPEX_DATA_POINTS dictionary.",
      "line": 347,
      "selection": {
        "start": {
          "line": 346,
          "character": 4
        },
        "end": {
          "line": 347,
          "character": 82
        }
      }
    },
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "### Create switching dataframe with capex\n\nThe previously loaded data is passed to the `get_capex_values` to create the switching dataframe with capex values.",
      "line": 352,
      "selection": {
        "start": {
          "line": 348,
          "character": 5
        },
        "end": {
          "line": 352,
          "character": 6
        }
      }
    },
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "## CAPEX values\n\nThis function assigns CAPEX values to the DataFrame based on the start date and potential switching technology for the plants.",
      "line": 71,
      "selection": {
        "start": {
          "line": 57,
          "character": 5
        },
        "end": {
          "line": 71,
          "character": 8
        }
      }
    },
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "### CAPEX values iteration\n\nThe main function iterates over the years, the original technology and the new technology to calculate the CAPEX for each year with the given technology. \nTHe control flow checks for the technologies and calculates the capex value accordingly. To calculate the capex it makes use of the `capex_generator`function:\n```python\ndef capex_generator(capex_dict: dict, technology: str, year: int, output_type: str = \"all\"):\n    \"\"\"Creates an interface to the tabular capex data.\n\n    Args:\n        capex_dict (dict): A capex dictionary with each capex type as a DataFrame\n        technology (str): The technology that you want to access\n        year (int): The year that you want to access\n        output_type (str, optional): Flag whether to access all the the capex values or whichever you specify. Defaults to 'all'.\n\n    Returns:\n        A (dict) if output_type is set to 'all'.\n        Otherwise returns the specific output_type specified (as float).\n    \"\"\"\n    greenfield = capex_dict[\"greenfield\"].loc[technology, year].value\n    brownfield = capex_dict[\"brownfield\"].loc[technology, year].value\n    other_opex = capex_dict[\"other_opex\"].loc[technology, year].value\n    capex_dict = {\n        \"greenfield\": greenfield,\n        \"brownfield\": brownfield,\n        \"other_opex\": other_opex,\n    }\n    if output_type == \"all\":\n        return capex_dict\n    return capex_dict[output_type]\n```",
      "line": 91,
      "selection": {
        "start": {
          "line": 83,
          "character": 5
        },
        "end": {
          "line": 91,
          "character": 59
        }
      }
    },
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "### return\n\nThe function returns a dataframe with the year as index and the start, new technologies and capex value in the columns",
      "line": 332,
      "selection": {
        "start": {
          "line": 328,
          "character": 5
        },
        "end": {
          "line": 332,
          "character": 6
        }
      }
    },
    {
      "file": "mppsteel/model/capex_switching.py",
      "description": "### Return switch df\n\nThe generated dataframe with the capex values by year is returned by the function if the `serialize_only` argument was set to `False`, if `True` the function serializes the dataframe into a pickle.",
      "line": 355,
      "selection": {
        "start": {
          "line": 353,
          "character": 5
        },
        "end": {
          "line": 355,
          "character": 35
        }
      }
    }
  ]
}