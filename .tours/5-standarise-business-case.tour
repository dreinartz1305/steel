{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "#5 - Standarise business case",
  "steps": [
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "# Standarisation of business case\n\nThis module contains the functions to standarise the business case per steel units and into summary tables.",
      "line": 1
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "## standarise_business_cases \n\nThis is the main function to standarise the business cases for each technology into per t steel. The function takes a boolean `serialize_only` argument, when it is set to `True` it will serialize the DataFrame to a pickle file and not return a DataFrame. By default `serialize_only` is set to `False`.",
      "line": 1363,
      "selection": {
        "start": {
          "line": 1355,
          "character": 1
        },
        "end": {
          "line": 1363,
          "character": 8
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### Full summary\n\nThe full summary DataFrame is generated by calling the function `generate_full_consumption_table` and passing the technology reference list that was loaded in `TEC_REFERENCE_LIST`",
      "line": 1364,
      "selection": {
        "start": {
          "line": 1364,
          "character": 5
        },
        "end": {
          "line": 1364,
          "character": 75
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "## Full consumption table\n\nThe function `generate_full_consumption_table` takes a list (`technology_list`) with the different technologies to standirise. Using the technology list it iterates over each technology and calls the `full_model_flow` for the given technology, the result is appended into a list, finally the function returns all the dataframes concatenated into a single `pandas.DataFrame`",
      "line": 1082,
      "selection": {
        "start": {
          "line": 1076,
          "character": 1
        },
        "end": {
          "line": 1082,
          "character": 38
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "## Full model flow function.\n\nThis is the function used to run the full model for the given technology.",
      "line": 1029
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### Load data\n\nLoad pickle files with the s1 emissions factors and create a dictionary with them by reading the metrics and values of the metrics.\n\nAlso, read the pickle with the data imports where the business cases are specified.",
      "line": 1032,
      "selection": {
        "start": {
          "line": 1030,
          "character": 5
        },
        "end": {
          "line": 1032,
          "character": 76
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### business_case_formatter_splitter\n\nUse the previously loaded business_cases data and split the DataFrame into two DataFrames: Parameters and Processes using the following function:\n\n```python\ndef business_case_formatter_splitter(df: pd.DataFrame):\n    logger.info(\n        \"Splitting the business cases into two DataFrames: Parameters and Processes\"\n    )\n    df_c = df.copy()\n    df_c = df_c.melt(\n        id_vars=[\n            \"Section\",\n            \"Process\",\n            \"Process Detail\",\n            \"Step\",\n            \"Material Category\",\n            \"Unit\",\n        ],\n        var_name=\"Technology\",\n    )\n    df_c.columns = [col.lower().replace(\" \", \"_\") for col in df_c.columns]\n    df_c[\"value\"].fillna(0, inplace=True)\n    df_c_parameters = df_c.loc[df_c[\"section\"] == \"Parameters\"]\n    df_c_process = df_c.loc[df_c[\"section\"] != \"Parameters\"]\n    df_c_parameters.drop(labels=[\"section\"], axis=1, inplace=True)\n    df_c_process.drop(labels=[\"section\"], axis=1, inplace=True)\n    return df_c_parameters, df_c_process\n```",
      "line": 1033,
      "selection": {
        "start": {
          "line": 1033,
          "character": 5
        },
        "end": {
          "line": 1033,
          "character": 83
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### Create production factors.\n\nUse the technology name, furnace group dictionary, and the hard coded factors to create the ptoduction factors.",
      "line": 1038,
      "selection": {
        "start": {
          "line": 1036,
          "character": 5
        },
        "end": {
          "line": 1038,
          "character": 6
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### Create production factors\n\nCreate the production factors for the given technology usin the furnace group dictionary and the hard coded factors.",
      "line": 377,
      "selection": {
        "start": {
          "line": 375,
          "character": 1
        },
        "end": {
          "line": 377,
          "character": 3
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### business_cases and business_case_formatter_splitter\n\nLoad the business_cases data and split the DataFrame into two DataFrames: Parameters and Processes using the following function:\n\n```python\ndef business_case_formatter_splitter(df: pd.DataFrame):\n    logger.info(\n        \"Splitting the business cases into two DataFrames: Parameters and Processes\"\n    )\n    df_c = df.copy()\n    df_c = df_c.melt(\n        id_vars=[\n            \"Section\",\n            \"Process\",\n            \"Process Detail\",\n            \"Step\",\n            \"Material Category\",\n            \"Unit\",\n        ],\n        var_name=\"Technology\",\n    )\n    df_c.columns = [col.lower().replace(\" \", \"_\") for col in df_c.columns]\n    df_c[\"value\"].fillna(0, inplace=True)\n    df_c_parameters = df_c.loc[df_c[\"section\"] == \"Parameters\"]\n    df_c_process = df_c.loc[df_c[\"section\"] != \"Parameters\"]\n    df_c_parameters.drop(labels=[\"section\"], axis=1, inplace=True)\n    df_c_process.drop(labels=[\"section\"], axis=1, inplace=True)\n    return df_c_parameters, df_c_process\n```",
      "line": 379,
      "selection": {
        "start": {
          "line": 378,
          "character": 5
        },
        "end": {
          "line": 379,
          "character": 83
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "#### Initate factors\n\nInitiate the factors that will be calculated for the technology.",
      "line": 397,
      "selection": {
        "start": {
          "line": 382,
          "character": 1
        },
        "end": {
          "line": 397,
          "character": 25
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "#### Set base factors\n\nSet the base factors depending the factor gorup they belong to.",
      "line": 403,
      "selection": {
        "start": {
          "line": 399,
          "character": 5
        },
        "end": {
          "line": 403,
          "character": 46
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "#### Factor calculation for BOSC\n\nThese lines of code check if the technology belongs to the `bosc_factor_group` ",
      "line": 430,
      "selection": {
        "start": {
          "line": 406,
          "character": 5
        },
        "end": {
          "line": 430,
          "character": 10
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "#### Hot metal required\n\nTo calculate the hot metal required the function calls the `tech_process_getter` function with the bc_processes, the technology used, the process, and the step of the procces.",
      "line": 412,
      "selection": {
        "start": {
          "line": 407,
          "character": 9
        },
        "end": {
          "line": 412,
          "character": 10
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### Tech process getter\n\nGet the technology process for the given technology, process and step.",
      "line": 62,
      "selection": {
        "start": {
          "line": 54,
          "character": 1
        },
        "end": {
          "line": 62,
          "character": 3
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### Filter dataframe and return value.\n\nThe function has a control flow implemented to check the possible combinations of having a `step`, `material`, and `process_detail` or neither. \n\nOnce the control flow checks, the function returns the value of the dataframe after being filtered out. For example, in the case there is a `process_detail` and not `material` and not `step` it returns filter only by technology, process and process detail.\n\n```python\nreturn df_c[\n             (df_c[\"technology\"] == technology) & \n             (df_c[\"process\"] == process) &\n             (df_c[\"process_detail\"] == process_detail)\n             ][\"value\"].values[0]\n```",
      "line": 124
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### Bosc_hot_metal_required\n\nTo calculate the bosc hot metal required the function multiplies the previously calculated hot_metal_required times the `BASIC_OXYGEN_STEELMAKING_CASTING_FACTOR` previously loaded.",
      "line": 415,
      "selection": {
        "start": {
          "line": 413,
          "character": 9
        },
        "end": {
          "line": 415,
          "character": 10
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "### Oxygen \n\nThe oxygen generation factor is calculated in a similar way that the bosc_hot_metal_required, calling the tech_process_getter function and then multiplying the returned value times the `BASIC_OXYGEN_STEELMAKING_CASTING_FACTOR`",
      "line": 430,
      "selection": {
        "start": {
          "line": 422,
          "character": 9
        },
        "end": {
          "line": 430,
          "character": 10
        }
      }
    },
    {
      "file": "mppsteel/data_loading/business_case_standardisation.py",
      "description": "#### Smelting & Blast Furance & DRI-BOF\n\nFor the Smelting & Blast Furance & DRI-BOF processes, follow a similar approach as with the BOSC factor calculations. First it calls the `tech_process_getter` function, and with the returned value calculates the factors.",
      "line": 493,
      "selection": {
        "start": {
          "line": 432,
          "character": 9
        },
        "end": {
          "line": 493,
          "character": 64
        }
      }
    }
  ]
}