{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "#6 - Country reference",
  "steps": [
    {
      "file": "mppsteel/data_loading/country_reference.py",
      "description": "# Country Reference\n\nTHis script is used to generate a country code mapper to be used to access the country metadata. This way the country names are mapped as their codes and are standarized for all the processes in the model.",
      "line": 1
    },
    {
      "file": "mppsteel/data_loading/country_reference.py",
      "description": "## create_country_ref\n\nThe main function to call and create the country reference dictionary. The function takes a boolean argument `serialize_only` that when set to `True` saves the dictionary with the country codes and metadata into a pickle file and does not return anything back. By default the `serialize_only` argument is set to `False`",
      "line": 134,
      "selection": {
        "start": {
          "line": 126,
          "character": 1
        },
        "end": {
          "line": 134,
          "character": 8
        }
      }
    },
    {
      "file": "mppsteel/data_loading/country_reference.py",
      "description": "### Load data\n\nLoad the `country_ref` pickle from the pickle data imports folder.",
      "line": 136,
      "selection": {
        "start": {
          "line": 136,
          "character": 5
        },
        "end": {
          "line": 136,
          "character": 70
        }
      }
    },
    {
      "file": "mppsteel/data_loading/country_reference.py",
      "description": "### Country dataframe formatter\n\nCreate the country reference using the function `country_df_formatter` that takes the previously loaded data.\n",
      "line": 137,
      "selection": {
        "start": {
          "line": 137,
          "character": 4
        },
        "end": {
          "line": 137,
          "character": 52
        }
      }
    },
    {
      "file": "mppsteel/data_loading/country_reference.py",
      "description": "## country_df_formatter\n\nThe function `country_df_formatter` takes a DataFrame with country data and formats its metadata to have the official country name, country code, M49 code and more metadata.",
      "line": 75,
      "selection": {
        "start": {
          "line": 67,
          "character": 1
        },
        "end": {
          "line": 75,
          "character": 8
        }
      }
    },
    {
      "file": "mppsteel/data_loading/country_reference.py",
      "description": "### New data\n\nTHe functions generates a copy of the DataFrame, renames the `ISO-alpha3 code` to `country_code`, and apply the function `official_name_getter` to get the official name of the country:\n\n```python\ndef official_name_getter(country_code: str) -> str:\n    \"\"\"Uses pycountry to get the official name of a country given an alpha3 country code.\n\n    Args:\n        country_code (str): An alpha3 country code\n\n    Returns:\n        str: The official name of the country.\n    \"\"\"\n    match = pycountry.countries.get(alpha_3=country_code)\n    match_attributes = dir(match)\n    if \"official_name\" in match_attributes:\n        return match.official_name\n    return \"\"\n```",
      "line": 81,
      "selection": {
        "start": {
          "line": 77,
          "character": 4
        },
        "end": {
          "line": 81,
          "character": 6
        }
      }
    },
    {
      "file": "mppsteel/data_loading/country_reference.py",
      "description": "### Columns with metadata\n\nTHe final step is to rename the columns in the dataframe, using the lists `current_columns` and `new_columns` a new dictionary is created and used to rename the columns in the dataframe that will be returned.",
      "line": 105,
      "selection": {
        "start": {
          "line": 82,
          "character": 5
        },
        "end": {
          "line": 105,
          "character": 16
        }
      }
    }
  ]
}